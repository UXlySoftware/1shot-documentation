openapi: 3.0.3
info:
  title: M2M Gateway API
  description: The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework
  termsOfService: https://uxly.software/terms/
  contact:
    name: API Support
    url: https://uxly.software/support
    email: support@uxly.software
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "0.1"
servers:
  - url: https://api.1shotapi.dev/v0
    description: Development server
  - url: https://api.1shotapi.com/v0
    description: Production server

paths:
  /token:
    post:
      tags: 
        - Authentication
      summary: Obtain an OAuth2 access token
      description: |
        This endpoint implements the OAuth2 Client Credentials Flow. Clients must send their `client_id` and `client_secret` in the request body to receive an access token.
      operationId: getAccessToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [client_credentials]
                  description: Must be `client_credentials`
                client_id:
                  type: string
                  description: A valid API Key value from a defined API Credential
                client_secret:
                  type: string
                  description: A valid Secret value from a defined API Credential
      responses:
        200:
          description: Successfully issued an access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth2 access token
                  token_type:
                    type: string
                    enum: [Bearer]
                    description: Token type (always `Bearer`)
                  expires_in:
                    type: integer
                    description: Expiration time in seconds (usually 3600)
                  scope:
                    type: string
                    description: Granted scopes
        400:
          description: Invalid request (e.g., missing parameters)
        401:
          description: Invalid client credentials
        403:
          $ref: "#/components/responses/PermissionError"
  
  /transactions/{transactionId}/test:  
    post:
      tags:
        - Transaction Execution
        - Test
      description: Simulates the execution of a transaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: internal ID of the transaction object
            example: 4b4bab2d-673d-4b91-8e09-f1402962cd3e
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the transaction via the name of the parameter
              properties:
                params:
                  type: object
                  example:
                    {
                      "recipientAddress": "0x3e6a2f0CBA03d293B54c9fCF354948903007a798",
                      "amount": "463",
                    }
                  additionalProperties:
                    type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionExecution"
        500:
          $ref: "#/components/responses/DatabaseError"
          
  /transactions/{transactionId}/execute:  
    post:
      tags:
        - Transaction Execution
      description: Starts the execution of the transaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: internal ID of the transaction object
            example: 4b4bab2d-673d-4b91-8e09-f1402962cd3e
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the transaction via the name of the parameter
              properties:
                params:
                  type: object
                  example:
                    {
                      "recipientAddress": "0x3e6a2f0CBA03d293B54c9fCF354948903007a798",
                      "amount": "463",
                    }
                  additionalProperties:
                    type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionExecution"
        500:
          $ref: "#/components/responses/DatabaseError"
  
  /business/{businessId}/transactions:
    post:
      tags:
        - Transaction
      description: Create a new transaction. Transactions represent a predefined call on a deployed contract.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chain:
                  $ref: "#/components/schemas/ChainId"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                escrowWalletId:
                  type: string
                  format: uuid
                  example: 8a6e0804-2bd0-4672-b79d-d97027f90720
                name:
                  type: string
                  example: Mint Token
                description:
                  type: string
                  example: This calls the mint() method on our ERC20 contract
                functionName:
                  type: string
                  example: mint
                params:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: amount
                      type:
                        $ref: "#/components/schemas/ESolidityAbiParameterType"
                      index:
                        type: integer
                        example: 0
                        description: This is the relative index in the contract function. It should start at 0, and must not skip any numbers.
                      value:
                        type: string
                        description: This is an optional value. This
                    required:
                      - name
                      - type
                      - index
              required:
                - chain
                - contractAddress
                - escrowWalletId
                - name
                - description
                - functionName
                - params
      responses:
        200:
          description: Returns the transaction object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"

        500:
          $ref: "#/components/responses/DatabaseError"

    get:
      tags:
        - Transaction
      description: Lists transactions for a business
      parameters:
        - name: businessId
          in: path
          description: The business that you want transactions from
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: chainId
          in: query
          required: false
          schema:
            type: string
            example: "43113"
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: "Best Transaction Ever"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/EDeletedStatusSelector"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a list of transaction objects.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/Transaction"
                  - $ref: "#/components/schemas/PagedResponse"

        500:
          $ref: "#/components/responses/DatabaseError"

  /transactions/{transactionId}:
    get:
      tags:
        - Transaction
      description: Gets transaction by ID
      parameters:
        - name: transactionId
          in: path
          description: The transaction that you want
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a transaction objects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

        500:
          $ref: "#/components/responses/DatabaseError"

    put:
      tags:
       - Transaction
       - Update
      parameters:
        - name: transactionId
          in: path
          description: The transaction that you want to update
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: You need to provide a value for every parameter in the transaction via the name of the parameter
              properties:
                chain:
                  $ref: "#/components/schemas/EChain"
                contractAddress:
                  $ref: "#/components/schemas/ContractAddress"
                escrowWalletId:
                  type: string
                  format: uuid
                  example: "0388046f-7b31-8477-793f-2b96ed6eb91e"
                  description: The WebhookEndpointId
                name:
                  type: string
                  description: The name of the transaction, used for organization purposes.
                description:
                  type: string
                  description: An optional description of the transaction, for your own reference in the site.
                functionName:
                  type: string
                  description: The name of the function on the contract. This is case-sensitive, so be sure to check your ABI.
                payable:
                  type: boolean
                  description: Some transactions can move tokens with them. Check your ABI.
                nativeTransaction:
                  type: boolean
                  description: It is possible to create a "native" transaction, one that is part of the EVM and not a smart contract. Set this to true to enable native transaction handling.
                callbackUrl:
                  type: string
                  format: URL
                  example: "https://my-server.com/1shotwebhook"
                  description: The desired URL for the callback. This will internally create a Webhook Trigger. Make sure to leave this undefined to not update the field, if you pass null it will clear the webhook.
                  nullable: true
      responses:
        200:
          description: Returns a transaction object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

        500:
          $ref: "#/components/responses/DatabaseError"

    delete:
      tags:
        - Transaction
      description: Deletes transaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"

        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/transactions/executions:
    get:
      tags:
        - Transaction
        - Transaction Execution
      description: Gets a paged list of transaction executions.
      parameters:
        - name: businessId
          in: path
          description: The business that you want transactions from
          required: true
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: chainId
          in: query
          required: false
          schema:
            type: string
            example: "43113"
        - name: status
          in: query
          required: false
          schema:
            type: integer
            description: 0 is Submitted, 1 is Completed, 2 is Retrying, 3 is Failed
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: escrowWalletId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: transactionId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: apiCredentialId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
        - name: userId
          in: query
          required: false
          schema:
            type: string
            format: uuid
            example: 8a6e0804-2bd0-4672-b79d-d97027f90720
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns a paged response of transaction execution objects.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/TransactionExecution"
                  - $ref: "#/components/schemas/PagedResponse"

        500:
          $ref: "#/components/responses/DatabaseError"
  
  /transactions/{transactionId}/restore:
    put:
      tags:
        - Transaction
      description: Undeletes transaction objects
      parameters:
        - name: transactionId
          in: path
          description: The transaction that you want
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      security:
        - OAuth2ClientCredentials:
          - read:api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rewardIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                    example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      responses:
        200:
          description: Returns the transaction object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"

        500:
          $ref: "#/components/responses/DatabaseError"

  /transactions/{transactionId}/executions/{transactionExecutionId}:
    get:
      tags:
        - Transaction
        - Transaction Execution
      description: Gets all the executions of the transaction
      parameters:
        - name: transactionId
          in: path
          description: The transaction that you want
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
        - name: transactionExecutionId
          in: path
          description: The transaction execution that you want
          required: true
          schema:
            type: string
            format: uuid
            example: f4e3d951-85ad-42fa-8e21-75545145c7cb
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns the specific requested transaction execution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionExecution"
        500:
          $ref: "#/components/responses/DatabaseError"

  /business/{businessId}/wallets:
    get:
      tags:
        - Escrow Wallets
      description: Lists escrow wallets for the business- NOT BusinessEscrowWallets. These are almost identical but EscrowWallet has more stuff.
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            type: string
            format: uuid
        - name: chainId
          in: query
          description: The specific chain to get the wallets for
          required: false
          schema:
            type: integer
            description: The chain ID to get the wallets for
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      response:
                        type: array
                        items:
                          $ref: "#/components/schemas/EscrowWallet"
                  - $ref: "#/components/schemas/PagedResponse"
        403:
          $ref: "#/components/responses/PermissionError"
    post:
      tags:
        - Escrow Wallets
      description: Adds an escrow wallet to a chain for a business
      parameters:
        - name: businessId
          in: path
          description: The internal uuid of the Business you are interested in
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chain:
                  $ref: "#/components/schemas/ChainId"
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: Returns the escrow wallet object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscrowWallet"

        500:
          $ref: "#/components/responses/DatabaseError"
          
  /wallets/{escrowWalletId}:
    get:
      tags:
        - Escrow Wallets
      description: Gets an escrow wallet by the ID. Doesn't matter what chain it's on.
      parameters:
        - name: escrowWalletId
          in: path
          description: The ID of the escrow wallet
          required: true
          schema:
            type: string
            format: uuid
        - name: includeBalances
          in: query
          description: Set to "true" to return the balance information for the escrow wallet. Includes only the native token balance.
          required: false
          schema:
            type: boolean
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscrowWallet"
        403:
          $ref: "#/components/responses/PermissionError"
    delete:
      tags:
        - Escrow Wallets
      description: Deletes an escrow wallet by ID. Must have permissions to the owning business.
      parameters:
        - name: escrowWalletId
          in: path
          description: The ID of the escrow wallet
          required: true
          schema:
            type: string
            format: uuid
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether or not the delete was successful
                    example: true
        403:
          $ref: "#/components/responses/PermissionError"
    put:
      tags:
        - Escrow Wallets
      description: Updates an escrow wallet. Will only update properties that are not null
      parameters:
        - name: escrowWalletId
          in: path
          description: The ID of the escrow wallet
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      security:
        - OAuth2ClientCredentials:
          - read:api
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscrowWallet"
        403:
          $ref: "#/components/responses/PermissionError"
  

components:
  securitySchemes:
    OAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.1shotapi.com/token
          scopes:
            read:api: Read access to the API
            write:api: Write access to the API

  responses:
    InvalidError:
      description: Data is invalid
    PermissionError:
      description: The authentication token does not have permission to access this endpoint
    DatabaseError:
      description: Database has encountered an error

  schemas:
    PageSize:
      description: The size of the page to return. Defaults to 25
      type: integer
      example: 25

    Page:
      description: Which page to return. This is 1 indexed, and default to the first page, 1
      type: integer
      example: 1

    TotalResults:
      description: The total number of results returned by a paged response
      type: integer
      example: 1
      $ref: "#/components/schemas/TotalResults"

    PagedResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        totalResults:
          $ref: "#/components/schemas/TotalResults"

    EntityBookKeepingWithoutDeleted:
      type: object
      properties:
        updated:
          type: number
          format: unix-timestamp
          example: 1659485172
        created:
          type: number
          format: unix-timestamp
          example: 1659485172

    EntityBookKeeping:
      allOf:
        - type: object
          properties:
            deleted:
              type: boolean
              example: false
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
    
    ETransactionExecutionStatus:
      type: string
      enum:
        - Submitted
        - Completed
        -  Retrying
        -  Failed
    
    ESolidityAbiParameterType:
      type: string
      enum:
        - address
        - bool
        - bytes
        - int
        - string
        - uint
        
    EDeletedStatusSelector:
      type: string
      enum:
        - live
        - archived
        - both
    
    EWebhookStatus:
      type: string
      description: The current status of the webhook
      enum:
        - Unsent
        - Success
        - Retrying
        - Failed

    EChain:
      type: integer
      description: The ChainId of a supported chain on 1Shot API
      enum:
        - 1
        - 11155111
        - 42
        - 137
        - 43114
        - 43113
        - 80002
        - 100
        - 56
        - 1284
        - 42161
        - 10
        - 592
        - 81
        - 97
        - 101
        - 324
        - 8453
        - 84532
        - 88888
        - 11297108109
        - 42220

    EEventName:
      type: string
      enum:
        - TransactionExecutionFailure
        - TransactionExecutionSuccess
        
    ChainId:
      type: number
      description: "Id of a chain"
      example: 1337

    ContractAddress:
      type: string
      description: string address of contract
      example: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
      
    EscrowWalletAddress:
      type: string
      description: string address of a wallet insight platform holds keys for
      example: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
      
    EscrowWallet:
      description: Escrow wallet stored by chain service
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: internal ID of the escrowWallet object
              example: 4b4bab2d-673d-4b91-8e09-f1402962cd3e
            accountAddress:
              $ref: "#/components/schemas/EscrowWalletAddress"
            businessId:
              type: string
              format: uuid
              description: The business ID that owns this wallet. Admin escrow wallets will not have this value. An escrow wallet will have either a user ID or a business ID.
            userId:
              type: string
              format: uuid
              description: The User ID of the person that owns this wallet. Admin escrow wallets will not have this value. An escrow wallet will have either a user ID or a business ID.
            chainId:
              $ref: "#/components/schemas/ChainId"
            name:
              type: string
              description: The name of the escrow wallet.
            description:
              type: string
              description: Optional description of the escrow wallet, can be used to describe it's purpose.
            isAdmin:
              type: boolean
              description: Whether or not the escrow wallet is an admin escrow wallet, used for internal purposes.
            accountBalanceDetails:
              allOf:
                - $ref: "#/components/schemas/AccountBalanceDetails"
                - nullable: true
        - $ref: "#/components/schemas/EntityBookKeepingWithoutDeleted"
        
    AccountBalanceDetails:
      type: object
      properties:
        type:
          type: string
          format: uuid
        ticker:
          type: string
          example: ETH
        chainId:
          $ref: "#/components/schemas/ChainId"
        tokenAddress:
          $ref: "#/components/schemas/ContractAddress"
        accountAddress:
          $ref: "#/components/schemas/EscrowWalletAddress"
        balance:
          type: string
          description: The balance of the token as a Big Number String
          example: 123400000000000000000
        decimals:
          type: integer
          description: The number of decimals in the balance. Determined by the token type.
        usdValue:
          type: number
          description: The current value of the token in USD as determined by the latest oracle information
        usdValueTimestamp:
          type: number
          format: unix-timestamp
      
    Transaction:
      description: A new transaction
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: internal ID of the transaction object
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            businessId:
              type: string
              format: uuid
              description: The business that owns this transaction
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            chain:
              $ref: "#/components/schemas/ChainId"
            contractAddress:
              $ref: "#/components/schemas/ContractAddress"
            escrowWalletId:
              type: string
              format: uuid
              description: Name of the escrowWallet that owns the transaction
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            name:
              type: string
              description: Name of transaction
              example: Got good
            description:
              type: string
              description: Description of transaction
              example: Transaction for getting good
            functionName:
              type: string
              description: Name of the function on the contract to call for this transaction
              example: mint
            params:
              type: array
              items: 
                $ref: "#/components/schemas/SolidityStructParam"
            callbackUrl:
              type: string
            publicKey:
              type: string
              format: base64
        - $ref: "#/components/schemas/EntityBookKeeping"
          
    SolidityStruct:
      description: A struct object as defined in solidity ABI
      allOf:
        - type: object
          properties: 
            id:
              type: string
              format: uuid
              description: Internal ID of the struct.
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            businessId:
              type: string
              format: uuid
              description: Internal ID of the business that owns this struct
              example: 100d2e83-dddd-480d-88ad-74a71c214912
            name: 
              type: string
              description: The name of the struct. Structs are used to define the parameters of a transaction, but these structs don't have names.
            params:
              type: array
              items:
                $ref: "#/components/schemas/SolidityStructParam"
        - $ref: "#/components/schemas/EntityBookKeeping"
        
      
      
    SolidityStructParam:
      description: A single defined parameter for a transaction. This is 
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Internal ID of the parameter.
          example: 100d2e83-dddd-480d-88ad-74a71c214912
        structId:
          type: string
          format: uuid
          description: Internal ID struct that owns this parameter.
          example: 100d2e83-dddd-480d-88ad-74a71c214912
        name:
          type: string
          description: A name to assign to the parameter. You will pass values to the parameter using this name. For clarity, this should be the name of the parameter on the underlying contract method, but you can set it as whatever you want.
        type:
          $ref: "#/components/schemas/ESolidityAbiParameterType"
        typeStructId:
          type: string
          format: uuid
          description: The ID of the sub-struct if the type is "struct"
          example: 100d2e83-dddd-480d-88ad-74a71c214912
        typeSize:
          type: integer
          description: The size of the type for int, uint and bytes. Also used for fixed and ufixed; it is the first size of the type. This must follow the rules for the type; valid values for bytes are 1 to 32, for others is 256 % 8.
        typeSize2:
          type: integer
          description: The second size for the type. Only used for fixed and ufixed types.
        isArray:
          type: boolean
          description: Set to true if the parameter takes an array of the type.
        arraySize:
          type: integer
          description: If the type array takes a fixed number of elements (IE, 5), this will be set.
        index:
          type: integer
          description: The index of the parameter in the contract method. This starts at 0 and must not skip numbers
        value:
          type: string
          description: The static value of the parameter, stored in the transaction itself. All parameters have to have a value at execution, but it can be a mix of static and dynamic parameters
        typeStruct:
          allOf:
            - $ref: "#/components/schemas/SolidityStruct"
            - description: The sub-struct if the type is "struct"
    
    TransactionExecution:
      description: A single execution of a transaction- ie, a function call
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: internal ID of the transaction execution
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            transactionId:
              type: string
              format: uuid
              description: internal ID of the transaction
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            apiCredentialId:
              type: string
              format: uuid
              description: ID of the API Credential used to execute the transaction. Note, this is not the API Key itself. This will be null if a user initiated the execution and not an API Credential
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
              nullable: true
            userId:
              type: string
              format: uuid
              description: The User ID that executed the transaction. This will be null if an API key was used instead of a user token.
              nullable: true
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            status:
              $ref: "#/components/schemas/ETransactionExecutionStatus"
            chainTransactionId:
              type: string
              format: uuid
              description: The ID of the actual chain transaction in the internal chain service.
              example: f4e3d951-85ad-42fa-8e21-75545145c7cb
            completedTimestamp:
              type: number
              format: unix-timestamp
              example: 1659485172
        - $ref: "#/components/schemas/EntityBookKeeping"